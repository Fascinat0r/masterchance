"""
Telegram-–±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–≤–∞–Ω—Ç–∏–ª–∏ –∏ —à–∞–Ω—Å—ã.
"""
import asyncio
from datetime import datetime, timedelta
from textwrap import dedent
from typing import List, Dict
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from app.application.use_cases.get_last_update_time import GetLastUpdateTimeUseCase
from app.config.config import settings
from app.config.logger import logger
from app.domain.models import Program, Application, ExamSession
from app.infrastructure.db.models import Base
from app.infrastructure.db.repositories.program_repository import ProgramRepository

_engine = create_engine(settings.database_url, echo=False, future=True)
Base.metadata.create_all(_engine)
_Session = sessionmaker(bind=_engine, future=True)

_SRC_TZ = ZoneInfo("Europe/Moscow")  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–∞–π—Ç ‚Äî –ú–°–ö


def split_message(text: str, max_len: int = 4000) -> List[str]:
    parts = []
    while len(text) > max_len:
        split_idx = text.rfind('\n', 0, max_len)
        if split_idx == -1:
            split_idx = max_len
        parts.append(text[:split_idx].strip())
        text = text[split_idx:].strip()
    if text:
        parts.append(text)
    return parts


def _fmt_qrange(q) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–≤–∞–Ω—Ç–∏–ª–∏ –≤ —Å—Ç—Ä–æ–∫—É `X - X`. –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤–µ—Ä–Ω—ë—Ç '‚Äî'.
    """
    if not q:
        return "‚Äî"
    try:
        if q.q90 == q.q95:
            return f"{q.q90:.0f}"
        else:
            return f"{q.q90:.0f} - {q.q95:.0f}"
    except Exception:
        return "‚Äî"


def _human_prog_line(dept_code: str, prog_name: str) -> str:
    return f"‚Ä¢ `{dept_code}`  *{prog_name}*"


def _fmt_local_from_msk_naive(dt_naive_msk: datetime) -> str:
    """
    –ù–∞ –≤—Ö–æ–¥–µ tz-naive –≤—Ä–µ–º—è –≤ –ú–°–ö (–∫–∞–∫ –≤ –ë–î). –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω–µ settings.timezone.
    """
    aware_msk = dt_naive_msk.replace(tzinfo=_SRC_TZ)
    local = aware_msk.astimezone(settings.timezone)
    # –±–µ–∑ –≥–æ–¥–∞ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ, –Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å %Y
    return local.strftime("%d.%m %H:%M")


def _exam_info_line(app: Application | None, sessions: List[ExamSession] | None) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É ¬´–ø–æ–¥—Å—Ç—Ä–æ—á–∫—É¬ª –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
      ‚Ä¢ –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–ª—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö (–±–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞);
      ‚Ä¢ –∏–Ω–∞—á–µ ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤ (–¥–æ 3 —à—Ç.);
      ‚Ä¢ –µ—Å–ª–∏ –¥–∞—Ç –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç / —ç–∫–∑–∞–º–µ–Ω—ã –ø—Ä–æ—à–ª–∏.
      ‚Ä¢ –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–∑–∞–º–µ–Ω –±—ã–ª < 3 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
    """
    # 1) –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if app and ((app.vi_score and app.vi_score > 0) or (app.subject1_score and app.subject1_score > 0)):
        parts = []
        if app.subject1_score > 0:
            parts.append(f"–ø—Ä–µ–¥–º.1={app.subject1_score}")
        if app.vi_score > 0:
            parts.append(f"–í–ò={app.vi_score}")
        detail = ", ".join(parts) if parts else "–±–∞–ª–ª—ã –ø–æ–ª—É—á–µ–Ω—ã"
        return f"   ‚Ü≥ üü¢ C–¥–∞–Ω: {detail}"

    # 2) –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –¥–∞—Ç—ã
    sessions = sessions or []
    if not sessions:
        return "   ‚Ü≥ üü° –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"

    now_msk = datetime.now(_SRC_TZ)
    upcoming = [s for s in sessions if s.dt.replace(tzinfo=_SRC_TZ) >= now_msk]
    if upcoming:
        show = upcoming[:3]
        dates = "; ".join(_fmt_local_from_msk_naive(s.dt) for s in show)
        more = " ‚Ä¶" if len(upcoming) > 3 else ""
        return f"   ‚Ü≥ üü° –ë–ª–∏–∂–∞–π—à–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã: {dates}{more}"
    else:
        last_dt = sessions[-1].dt
        line = f"   ‚Ü≥ ‚ö™ –≠–∫–∑–∞–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å (–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {_fmt_local_from_msk_naive(last_dt)})"
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ—à–ª–æ < 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
        try:
            last_aware = last_dt.replace(tzinfo=_SRC_TZ)
            delta = now_msk - last_aware
            if delta.total_seconds() >= 0 and delta < timedelta(days=3):
                line += "\n   ‚Ü≥ ‚ö†Ô∏è –ø—Ä–æ—à–ª–æ < 3 –¥–Ω–µ–π ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –µ—â—ë –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è."
        except Exception:
            pass
        return line


def _format_response(applicant_id: str,
                     all_codes: List[str],
                     probs_uncond: Dict[str, float],
                     quantiles,
                     prog_map: Dict[str, Program],
                     diag,
                     apps_by_code: Dict[str, Application],
                     sessions_by_code: Dict[str, List[ExamSession]]) -> str:
    """
    –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫:
      1) –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π + —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ —ç–∫–∑–∞–º–µ–Ω—ã (–±–∞–ª–ª—ã/–¥–∞—Ç—ã).
      2) üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è (—É—Å–ª–æ–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏), –ø–æ–¥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–æ–π ‚Äî ¬´–ø—Ä–æ—Ö–æ–¥–Ω–æ–π: X - X¬ª.
      3) –ë–ª–æ–∫ –ø—Ä–æ ¬´–ø—Ä–æ–ª—ë—Ç¬ª.
    """
    if not all_codes:
        return f"–£ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ `{applicant_id}` –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ü§∑‚Äç‚ôÇÔ∏è"

    # 1) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è + —ç–∫–∑–∞–º–µ–Ω—ã
    head_programs = "üìù *–í–∞—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è*"
    prog_lines: List[str] = []
    for code in all_codes:
        prog = prog_map.get(code)
        line = _human_prog_line(
            dept_code=(prog.department_code if prog else code.split('.')[0]),
            prog_name=(prog.name if prog else code),
        )
        prog_lines.append(line)

        app = apps_by_code.get(code)
        sess = sessions_by_code.get(code, [])
        exam_line = _exam_info_line(app, sess)
        if exam_line:
            prog_lines.append(exam_line)

    # 2) –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (—É—Å–ª–æ–≤–Ω—ã–µ) + –ø—Ä–æ—Ö–æ–¥–Ω—ã–µ –Ω–∏–∂–µ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–∏
    p_excl = diag.p_excluded if diag else 0.0
    p_incl = max(1.0 - p_excl, 1e-9)
    probs_cond: Dict[str, float] = {k: min(v / p_incl, 1.0) for k, v in probs_uncond.items()}

    head_forecast = "\n\nüîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è*"
    forecast_lines: List[str] = []
    for code in all_codes:
        pname = prog_map[code].name if code in prog_map else code
        p = probs_cond.get(code)
        p_str = f"{p * 100:.1f}%" if p is not None else "‚Äî"
        q = quantiles.get(code)
        forecast_lines.append(f"‚Ä¢ `{pname}`  ‚Üí  *{p_str}* (–ø—Ä–æ—Ö–æ–¥–Ω–æ–π: {_fmt_qrange(q)})")

    # 3) ¬´–ü—Ä–æ–ª—ë—Ç¬ª
    fail_uncond = max(0.0, 1.0 - sum(probs_uncond.values()))
    fail_cond = min(1.0, (diag.p_fail_when_included if diag else fail_uncond / p_incl))
    head_fail = (
        "\n\nüö´ *¬´–ü—Ä–æ–ª–µ—Ç–µ–ª —Å –º–∞–≥–æ–π¬ª*\n"
        f"‚Ä¢ –í *{fail_cond * 100:.1f}%* —Å–∏–º—É–ª—è—Ü–∏–π\n"
    )

    return "\n".join([head_programs, *prog_lines, head_forecast, *forecast_lines, head_fail])


async def how_cmd(msg: Message):
    await msg.answer(dedent("""
    üß† *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑?*
    ...
    """).strip(), parse_mode="Markdown")


async def start_cmd(msg: Message):
    session = _Session()
    repo = ProgramRepository(session)
    try:
        last_dt = GetLastUpdateTimeUseCase(repo).execute()
    except Exception:
        last_dt = None
    finally:
        session.close()

    def _fmt(dt: datetime | None) -> str:
        return dt.strftime("%d.%m.%Y %H:%M") if dt else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    await msg.answer(
        dedent(f"""
        –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ **–∫–æ–¥ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞** ‚Äî –ø–æ–∫–∞–∂—É –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, 
        –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –ø—Ä–æ—Ö–æ–¥–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∏ —à–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.
        
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ‚Äî *–ª–∏–±–æ —Ç–≤–æ–∏ –±–∞–ª–ª—ã –∑–∞ —ç–∫–∑–∞–º–µ–Ω*, 
        *–ª–∏–±–æ –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤*, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–∞–≤–∞–ª.

        –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: **{_fmt(last_dt)}**

        /how ‚Äî –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
        """).strip(),
        parse_mode="Markdown"
    )


async def applicant_handler(msg: Message):
    applicant_id = msg.text.strip()
    if not applicant_id:
        return

    session = _Session()
    repo = ProgramRepository(session)

    try:
        all_codes = repo.get_program_codes_by_applicant(applicant_id)
        if not all_codes:
            await msg.answer(
                f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ `{applicant_id}`.",
                parse_mode="Markdown"
            )
            return

        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ / –∫–≤–∞–Ω—Ç–∏–ª–∏ / –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º
        prob_objs = repo.get_probabilities_for_applicant(applicant_id)
        probs_uncond = {p.program_code: p.probability for p in prob_objs}

        quantiles = repo.get_quantiles_for_programs(all_codes)
        prog_map = repo.get_programs_by_codes(all_codes)

        diag = repo.get_diagnostics_for_applicant(applicant_id)

        # –ù–æ–≤–æ–µ: –∑–∞—è–≤–∫–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ —Å –±–∞–ª–ª–∞–º–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
        apps = repo.get_applications_by_applicant(applicant_id)
        apps_by_code: Dict[str, Application] = {a.program_code: a for a in apps if a.program_code in all_codes}

        # –ù–æ–≤–æ–µ: –±–ª–∏–∂–∞–π—à–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
        sessions_by_code: Dict[str, List[ExamSession]] = {}
        for code in all_codes:
            sessions_by_code[code] = repo.get_exam_sessions_by_program(code)

        full_text = _format_response(
            applicant_id, all_codes, probs_uncond, quantiles, prog_map, diag,
            apps_by_code=apps_by_code, sessions_by_code=sessions_by_code
        )

        for part in split_message(full_text):
            try:
                await msg.answer(part, parse_mode="Markdown")
            except TelegramBadRequest:
                await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å Markdown).")
                break

    except Exception as exc:
        logger.exception("TG-handler error: %s", exc)
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò•")
    finally:
        session.close()


def start_bot(bot_token) -> None:
    bot = Bot(bot_token)
    dp = Dispatcher()

    dp.message.register(start_cmd, CommandStart())
    dp.message.register(how_cmd, Command("how"))
    dp.message.register(applicant_handler, F.text)

    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    asyncio.run(dp.start_polling(bot))
