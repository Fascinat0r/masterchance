from __future__ import annotations

import re
from datetime import datetime
from typing import List, Set, Tuple

from app.config.logger import logger
from app.domain.models import ExamSession, Program
from app.infrastructure.db.repositories.program_repository import ProgramRepository
from app.infrastructure.parser.parse_exam_schedule import get_master_exam_schedule

# –∏–∑ "38.04.05_02" –±–µ—Ä—ë–º "38.04.05"
_DEPT_RE = re.compile(r"^\d{2}\.\d{2}\.\d{2}")


class UpdateExamScheduleUseCase:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç exam_sessions.

    ‚öôÔ∏è –ú–∞—Ç—á–∏–Ω–≥:
      ‚Ä¢ –ë–µ—Ä—ë–º —Å—Ç–æ–ª–±–µ—Ü ¬´–ö–æ–¥¬ª –≤–∏–¥–∞ '38.04.05_02'
      ‚Ä¢ –ò–∑ –Ω–µ–≥–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ñ–µ–¥—Ä—É '38.04.05'
      ‚Ä¢ –ù–∞—Ö–æ–¥–∏–º –í–°–ï –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å department_code == '38.04.05'
      ‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –¥–ª—è –ö–ê–ñ–î–û–ô –ø—Ä–æ–≥—Ä–∞–º–º—ã —ç—Ç–æ–π –∫–∞—Ñ–µ–¥—Ä—ã

    üîí –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è:
      ‚Ä¢ –ù–µ —Å–æ–∑–¥–∞—ë–º –¥—É–±–ª—å, –µ—Å–ª–∏ (program_code, dt) —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—É—Å–∫–µ
    """

    def __init__(self, repo: ProgramRepository):
        self._repo = repo

    @staticmethod
    def _dept_from_exam_code(exam_code: str) -> str | None:
        m = _DEPT_RE.search(exam_code or "")
        return m.group(0) if m else None

    @staticmethod
    def _parse_dt(s: str) -> datetime | None:
        try:
            # –í—Ä–µ–º—è –ú–°–ö, tz-naive (–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ —Å –æ—Å—Ç–∞–ª—å–Ω–æ–π –ë–î)
            return datetime.strptime(s.strip(), "%d.%m.%Y %H:%M")
        except Exception:
            return None

    def execute(self) -> int:
        logger.info("=== –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞—Ç –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤ ===")
        data = get_master_exam_schedule()
        logger.info("–°–ø–∞—Ä—Å–∏–ª–∏ %d —Å—Ç—Ä–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", len(data))

        sessions: List[ExamSession] = []
        seen: Set[Tuple[str, datetime]] = set()  # (program_code, dt)
        unmatched_depts = 0
        total_rows = 0

        for row in data:
            exam_code = (row.get("code") or "").strip()
            dept = self._dept_from_exam_code(exam_code) or exam_code.split("_")[0].strip()
            if not dept:
                logger.warning("–°—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–≥–æ –∫–æ–¥–∞ –∫–∞—Ñ–µ–¥—Ä—ã: %s", exam_code)
                continue

            # –í—Å–µ –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —ç—Ç–æ–π –∫–∞—Ñ–µ–¥—Ä—ã
            progs: List[Program] = self._repo.get_programs_by_department(dept)
            if not progs:
                unmatched_depts += 1
                logger.warning("–ù–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞—Ñ–µ–¥—Ä—ã dept=%s (exam_code=%s)", dept, exam_code)
                continue

            # –ö–∞–∂–¥—É—é –¥–∞—Ç—É —Ä–∞–∑–º–Ω–æ–∂–∞–µ–º –Ω–∞ –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞—Ñ–µ–¥—Ä—ã
            dates = [d for d in (row.get("dates") or []) if d and d.strip()]
            for ds in dates:
                dt = self._parse_dt(ds)
                if not dt:
                    logger.warning("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—É—é –¥–∞—Ç—É '%s' (dept=%s, exam_code=%s)", ds, dept, exam_code)
                    continue
                for prog in progs:
                    key = (prog.code, dt)
                    if key in seen:
                        continue
                    seen.add(key)
                    sessions.append(ExamSession(
                        program_code=prog.code,
                        exam_code=exam_code,
                        dt=dt,
                        institute=row.get("institute"),
                        education_form=row.get("education_form"),
                        contract=row.get("contract"),
                        program_name=row.get("program"),
                        program_pdf_url=row.get("program_pdf_url"),
                    ))
                    total_rows += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ü–µ–ª–∏–∫–æ–º
        self._repo.clear_exam_sessions()
        self._repo.add_exam_sessions_bulk(sessions)
        self._repo.commit()

        logger.info("‚úÖ –ó–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: %d (–Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞—Ñ–µ–¥—Ä: %d)", len(sessions), unmatched_depts)
        return len(sessions)
